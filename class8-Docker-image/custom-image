Dockerfile Instructions Explained with Examples


vim dockerfile

FROM docker.io/centos
MAINTAINER Devops Engineer
RUN yum update -y && yum -y install httpd
RUN mkdir -p /data/myscript
WORKDIR /data/myscript
CMD python app.py

after you created the above file then run the below command

docker build .


another dockerfile for more easy understanding

vim dockerfile --> creating the dockerfile via vim editor

FROM docker.io/centos
MAINTAINER admin
RUN yum update -y && yum -y install httpd
RUN echo "Welcome to our homepage created using dockerfile" > /var/www/html/index.html
EXPOSE 80
CMD apachectl -D FOREGROUND


after you created the above file then run the below command

docker build .


[root@server1 ~]# docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
<none>              <none>              6f3baff9b180        2 hours ago         200MB
<none>              <none>              3b1943a5f478        2 hours ago         200MB
<none>              <none>              7770d3b057fc        3 hours ago         362MB
centos              latest              5182e96772bf        2 weeks ago         200MB
nginx               latest              c82521676580        4 weeks ago         109MB
hello-world         latest              2cb0d9787c4d        6 weeks ago         1.85kB

While building image itself set tagging --> docker build -t cloudnloud/cloud1_local:latest .

After build image as a none tagging --> docker tag <image-id> cloudnloud/cloud1_local:latest

docker login 

docker push cloudnloud/cloud_local:latest


Explanation
1. Used FROM instruction to specify the image.
2. Used MAINTAINER instruction to specify information about the author.
3. Used RUN instruction to update all packages and install the httpd package
4. Again used ADD instruction to create a homepage "index.html" under the apache default directory /var/www/html.
5. Used EXPOSE instruction to open the listening port 80 of httpd service.
6. Used CMD instruction to run a apache service command as an executable when container is launched.


[root@docker-host /]# docker images

*********************************************************************************************************************

Docker file 1

FROM ubuntu:latest
RUN apt update
RUN apt install -y nginx
ADD index.html /usr/share/nginx/html/index.html
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]

docker images

While building image itself set tagging --> docker build -t cloudnloud/cloud1_local:latest .

After build image as a none tagging --> docker tag <image-id> cloudnloud/cloud1_local:latest

docker login 

docker push cloudnloud/cloud_local:latest

*********************************************************************************************************************


docker run -dit --name cloudnloud-web -p 8080:80 -v /var/tmp/:/usr/local/apache2/htdocs/ httpd:2.4

8080 port --> base linux machine port
80 --> docker image port
/var/tmp/ --> base linux machine directory
/usr/local/apache2/htdocs/ --> docker image directory -->(goto docker hub and check it)

*********************************************************************************************************************
